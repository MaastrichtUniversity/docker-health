# ServiceAccount for the TLS secret creation job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tls-secret-creator
  namespace: dh-health
---
# ClusterRole with permissions to create secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tls-secret-creator
  namespace: dh-health
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "list", "patch", "update"]
---
# RoleBinding to bind the ServiceAccount to the Role
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tls-secret-creator
  namespace: dh-health
subjects:
- kind: ServiceAccount
  name: tls-secret-creator
  namespace: dh-health
roleRef:
  kind: Role
  name: tls-secret-creator
  apiGroup: rbac.authorization.k8s.io
---
# Job to create TLS secrets from certificate files on the node
apiVersion: batch/v1
kind: Job
metadata:
  name: create-tls-secrets
  namespace: dh-health
spec:
  template:
    spec:
      restartPolicy: OnFailure
      volumes:
      - name: ssl-certs
        hostPath:
          path: /etc/ssl/certs
          type: Directory
      containers:
      - name: secret-creator
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e
          
          # Function to create TLS secret from cert files
          create_tls_secret() {
            local secret_name=$1
            local cert_file=$2
            local key_file=$3
            
            if [[ -f "/ssl-certs/$cert_file" && -f "/ssl-certs/$key_file" ]]; then
              echo "Creating secret: $secret_name"
              kubectl create secret tls "$secret_name" \
                --cert="/ssl-certs/$cert_file" \
                --key="/ssl-certs/$key_file" \
                --namespace=dh-health \
                --dry-run=client -o yaml | kubectl apply -f -
            else
              echo "Warning: Certificate files not found for $secret_name"
            fi
          }
          
          # Create all TLS secrets
          create_tls_secret "federation-tls-secret" "federation.tst.dh.unimaas.nl.crt" "federation.tst.dh.unimaas.nl.key"
          create_tls_secret "jupyter-tls-secret" "jupyter.tst.dh.unimaas.nl.crt" "jupyter.tst.dh.unimaas.nl.key"
          create_tls_secret "portal-envida-tls-secret" "portal.envida.tst.dh.unimaas.nl.crt" "portal.envida.tst.dh.unimaas.nl.key"
          create_tls_secret "portal-mumc-tls-secret" "portal.mumc.tst.dh.unimaas.nl.crt" "portal.mumc.tst.dh.unimaas.nl.key"
          create_tls_secret "portal-zio-tls-secret" "portal.zio.tst.dh.unimaas.nl.crt" "portal.zio.tst.dh.unimaas.nl.key"
          create_tls_secret "transform-tls-secret" "transform.tst.dh.unimaas.nl.crt" "transform.tst.dh.unimaas.nl.key"
          
          echo "TLS secrets creation completed"
        volumeMounts:
        - name: ssl-certs
          mountPath: /ssl-certs
          readOnly: true
        securityContext:
          runAsUser: 0
      serviceAccount: tls-secret-creator
