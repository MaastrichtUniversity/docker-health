# generated by datamodel-codegen:
#   filename:  vital_signs.t.json
#   timestamp: 2023-11-30T14:54:48+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class OriginalAuthor(BaseModel):
    name: str
    organisation: str
    email: str
    date: str


class LifecycleState(BaseModel):
    codeString: str


class OtherDetails(BaseModel):
    licence: str
    custodian_organisation: str
    original_namespace: str
    original_publisher: str
    custodian_namespace: str
    sem_ver: str
    build_uid: str
    MD5_CAM_1_0_1: str = Field(..., alias='MD5-CAM-1.0.1')
    PARENT_MD5_CAM_1_0_1: str = Field(..., alias='PARENT:MD5-CAM-1.0.1')


class TerminologyId(BaseModel):
    value: str


class Language(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class De(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language
    keywords: List
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language1(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Sv(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language1
    keywords: List
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language2(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Fi(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language2
    keywords: List
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language3(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Ko(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language3
    keywords: List
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language4(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class PtBr(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language4
    keywords: List
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language5(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class ArSy(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language5
    keywords: List
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language6(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class En(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language6
    keywords: List
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language7(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class It(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language7
    keywords: List
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language8(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Fr(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language8
    keywords: List
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language9(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Es(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language9
    keywords: List
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language10(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class EsAr(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language10
    keywords: List
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language11(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Nb(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language11
    keywords: List
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language12(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Nl(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language12
    keywords: List
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Details(BaseModel):
    de: De
    sv: Sv
    fi: Fi
    ko: Ko
    pt_br: PtBr = Field(..., alias='pt-br')
    ar_sy: ArSy = Field(..., alias='ar-sy')
    en: En
    it: It
    fr: Fr
    es: Es
    es_ar: EsAr = Field(..., alias='es-ar')
    nb: Nb
    nl: Nl


class Description(BaseModel):
    field_type: str = Field(..., alias='@type')
    originalAuthor: OriginalAuthor
    otherContributors: List
    lifecycleState: LifecycleState
    ipAcknowledgements: Dict[str, Any]
    references: Dict[str, Any]
    conversionDetails: Dict[str, Any]
    otherDetails: OtherDetails
    details: Details


class ArchetypeId(BaseModel):
    field_type: str = Field(..., alias='@type')
    value: str


class Child(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmTypeName: str
    attributes: List
    attributeTuples: List
    occurrences: Optional[str] = None
    nodeId: Optional[str] = None
    archetypeRef: Optional[str] = None
    referenceType: Optional[str] = None


class Cardinality(BaseModel):
    field_type: str = Field(..., alias='@type')
    interval: str
    ordered: bool
    unique: bool


class Attribute(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmAttributeName: str
    children: List[Child]
    existence: Optional[str] = None
    cardinality: Optional[Cardinality] = None


class Definition(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmTypeName: str
    nodeId: str
    attributes: List[Attribute]
    attributeTuples: List


class At00001(BaseModel):
    field_type: str = Field(..., alias='@type')
    code: str
    text: str
    description: str


class ArSy1(BaseModel):
    at0000_1: At00001 = Field(..., alias='at0000.1')


class En1(BaseModel):
    at0000_1: At00001 = Field(..., alias='at0000.1')


class EsAr1(BaseModel):
    at0000_1: At00001 = Field(..., alias='at0000.1')


class Ko1(BaseModel):
    at0000_1: At00001 = Field(..., alias='at0000.1')


class PtBr1(BaseModel):
    at0000_1: At00001 = Field(..., alias='at0000.1')


class Es1(BaseModel):
    at0000_1: At00001 = Field(..., alias='at0000.1')


class Nl1(BaseModel):
    at0000_1: At00001 = Field(..., alias='at0000.1')


class Sv1(BaseModel):
    at0000_1: At00001 = Field(..., alias='at0000.1')


class De1(BaseModel):
    at0000_1: At00001 = Field(..., alias='at0000.1')


class Fi1(BaseModel):
    at0000_1: At00001 = Field(..., alias='at0000.1')


class It1(BaseModel):
    at0000_1: At00001 = Field(..., alias='at0000.1')


class Fr1(BaseModel):
    at0000_1: At00001 = Field(..., alias='at0000.1')


class Nb1(BaseModel):
    at0000_1: At00001 = Field(..., alias='at0000.1')


class TermDefinitions(BaseModel):
    ar_sy: ArSy1 = Field(..., alias='ar-sy')
    en: En1
    es_ar: EsAr1 = Field(..., alias='es-ar')
    ko: Ko1
    pt_br: PtBr1 = Field(..., alias='pt-br')
    es: Es1
    nl: Nl1
    sv: Sv1
    de: De1
    fi: Fi1
    it: It1
    fr: Fr1
    nb: Nb1


class Terminology(BaseModel):
    field_type: str = Field(..., alias='@type')
    conceptCode: str
    termDefinitions: TermDefinitions
    termBindings: Dict[str, Any]
    terminologyExtracts: Dict[str, Any]
    valueSets: Dict[str, Any]


class OtherDetails1(BaseModel):
    PARENT_MD5_CAM_1_0_1: str = Field(..., alias='PARENT:MD5-CAM-1.0.1')


class Language13(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class De2(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language13
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    copyright: str
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language14(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Ru(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language14
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    copyright: str
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language15(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Sv2(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language15
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language16(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Fi2(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language16
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language17(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Ko2(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language17
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    copyright: str
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language18(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class PtBr2(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language18
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    copyright: Optional[str] = None
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language19(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class ArSy2(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language19
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    copyright: str
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language20(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class En2(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language20
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    copyright: str
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language21(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class ZhCn(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language21
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    copyright: str
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language22(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Es2(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language22
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    copyright: Optional[str] = None
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language23(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class EsAr2(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language23
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    copyright: str
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language24(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Nb2(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language24
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language25(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Ja(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language25
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    copyright: str
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language26(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Fa(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language26
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    copyright: str
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language27(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Nl2(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language27
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    copyright: Optional[str] = None
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language28(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Fr2(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language28
    purpose: str
    keywords: List[str]
    use: str
    misuse: str
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Language29(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class EsCo(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language29
    purpose: str
    keywords: List
    use: str
    misuse: str
    copyright: str
    originalResourceUri: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Details1(BaseModel):
    de: De2
    ru: Ru
    sv: Sv2
    fi: Fi2
    ko: Optional[Ko2] = None
    pt_br: PtBr2 = Field(..., alias='pt-br')
    ar_sy: ArSy2 = Field(..., alias='ar-sy')
    en: En2
    zh_cn: Optional[ZhCn] = Field(None, alias='zh-cn')
    es: Optional[Es2] = None
    es_ar: Optional[EsAr2] = Field(None, alias='es-ar')
    nb: Nb2
    ja: Optional[Ja] = None
    fa: Optional[Fa] = None
    nl: Nl2
    fr: Optional[Fr2] = None
    es_co: Optional[EsCo] = Field(None, alias='es-co')


class Description1(BaseModel):
    field_type: str = Field(..., alias='@type')
    originalAuthor: Dict[str, Any]
    otherContributors: List
    ipAcknowledgements: Dict[str, Any]
    references: Dict[str, Any]
    conversionDetails: Dict[str, Any]
    otherDetails: OtherDetails1
    details: Details1


class AssumedValue(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Child6(BaseModel):
    field_type: str = Field(..., alias='@type')
    occurrences: Optional[str] = None
    terminologyId: TerminologyId
    constraint: List[str]
    rmTypeName: Optional[str] = None
    assumedValue: Optional[AssumedValue] = None


class Attribute6(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmAttributeName: str
    children: List[Child6]


class Member(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmAttributeName: str
    children: List


class Constraint(BaseModel):
    lower: float
    upper: float
    lowerIncluded: bool
    upperIncluded: bool
    lowerUnbounded: bool
    upperUnbounded: bool


class Member1(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmTypeName: Optional[str] = None
    constraint: List[Union[str, Constraint]]


class Tuple(BaseModel):
    field_type: str = Field(..., alias='@type')
    members: List[Member1]


class AttributeTuple(BaseModel):
    field_type: str = Field(..., alias='@type')
    members: List[Member]
    tuples: List[Tuple]


class Child5(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmTypeName: str
    attributes: List[Attribute6]
    attributeTuples: List[AttributeTuple]


class Attribute5(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmAttributeName: str
    children: List[Child5]


class Constraint1(BaseModel):
    lower: str
    upper: str
    lowerIncluded: bool
    upperIncluded: bool
    lowerUnbounded: bool
    upperUnbounded: bool


class Child4(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmTypeName: str
    nodeId: Optional[str] = None
    attributes: Optional[List[Attribute5]] = None
    attributeTuples: Optional[List] = None
    occurrences: Optional[str] = None
    terminologyId: Optional[TerminologyId] = None
    constraint: Optional[List[Union[str, Constraint1]]] = None
    selectedTerminologies: Optional[List] = None


class Attribute4(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmAttributeName: str
    children: List[Child4]


class Child3(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmTypeName: str
    nodeId: Optional[str] = None
    attributes: List[Attribute4]
    attributeTuples: List
    targetPath: Optional[str] = None


class Attribute3(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmAttributeName: str
    children: List[Child3]


class Child2(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmTypeName: str
    nodeId: str
    attributes: List[Attribute3]
    attributeTuples: List
    occurrences: Optional[str] = None


class Attribute2(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmAttributeName: str
    children: List[Child2]


class Child1(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmTypeName: str
    nodeId: str
    attributes: List[Attribute2]
    attributeTuples: List


class Attribute1(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmAttributeName: str
    children: List[Child1]


class Definition1(BaseModel):
    field_type: str = Field(..., alias='@type')
    rmTypeName: str
    nodeId: str
    attributes: List[Attribute1]
    attributeTuples: List


class At00061(BaseModel):
    field_type: str = Field(..., alias='@type')
    code: str
    text: str
    description: str


class At0000113(BaseModel):
    field_type: str = Field(..., alias='@type')
    code: str
    text: str
    description: str
    comment: Optional[str] = None


class At00041(BaseModel):
    field_type: str = Field(..., alias='@type')
    code: str
    text: str
    description: str


class At00021(BaseModel):
    field_type: str = Field(..., alias='@type')
    code: str
    text: str
    description: str


class At00031(BaseModel):
    field_type: str = Field(..., alias='@type')
    code: str
    text: str
    description: str


class Ac02(BaseModel):
    field_type: str = Field(..., alias='@type')
    text: str
    code: str
    description: str


class En3(BaseModel):
    at0006_1: Optional[At00061] = Field(None, alias='at0006.1')
    at0000_1: Optional[At0000113] = Field(None, alias='at0000.1')
    at0004_1: Optional[At00041] = Field(None, alias='at0004.1')
    at0002_1: Optional[At00021] = Field(None, alias='at0002.1')
    at0003_1: Optional[At00031] = Field(None, alias='at0003.1')
    ac0_2: Optional[Ac02] = Field(None, alias='ac0.2')


class De3(BaseModel):
    ac0_2: Optional[Ac02] = Field(None, alias='ac0.2')


class Nl3(BaseModel):
    ac0_2: Optional[Ac02] = Field(None, alias='ac0.2')


class Ru1(BaseModel):
    ac0_2: Optional[Ac02] = Field(None, alias='ac0.2')


class ArSy3(BaseModel):
    ac0_2: Optional[Ac02] = Field(None, alias='ac0.2')


class PtBr3(BaseModel):
    ac0_2: Optional[Ac02] = Field(None, alias='ac0.2')


class Es3(BaseModel):
    ac0_2: Optional[Ac02] = Field(None, alias='ac0.2')


class Nb3(BaseModel):
    ac0_2: Optional[Ac02] = Field(None, alias='ac0.2')


class Sv3(BaseModel):
    ac0_2: Optional[Ac02] = Field(None, alias='ac0.2')


class Fi3(BaseModel):
    ac0_2: Optional[Ac02] = Field(None, alias='ac0.2')


class EsCo1(BaseModel):
    ac0_2: Ac02 = Field(..., alias='ac0.2')


class TermDefinitions1(BaseModel):
    en: En3
    ja: Optional[Dict[str, Any]] = None
    de: De3
    zh_cn: Optional[Dict[str, Any]] = Field(None, alias='zh-cn')
    nl: Nl3
    ru: Ru1
    fa: Optional[Dict[str, Any]] = None
    ar_sy: ArSy3 = Field(..., alias='ar-sy')
    es_ar: Optional[Dict[str, Any]] = Field(None, alias='es-ar')
    pt_br: PtBr3 = Field(..., alias='pt-br')
    ko: Optional[Dict[str, Any]] = None
    es: Optional[Es3] = None
    nb: Nb3
    sv: Sv3
    fi: Fi3
    fr: Optional[Dict[str, Any]] = None
    es_co: Optional[EsCo1] = Field(None, alias='es-co')


class SNOMEDCT(BaseModel):
    at0000_1: str = Field(..., alias='at0000.1')
    at0004_1: str = Field(..., alias='at0004.1')
    at0005_1: str = Field(..., alias='at0005.1')
    at0004_2: str = Field(..., alias='at0004.2')
    at0005_2: str = Field(..., alias='at0005.2')
    at0013_1: str = Field(..., alias='at0013.1')


class LOINC(BaseModel):
    at0004_1: str = Field(..., alias='at0004.1')


class TermBindings(BaseModel):
    SNOMED_CT: Optional[SNOMEDCT] = Field(None, alias='SNOMED-CT')
    LOINC: Optional[LOINC] = None


class Ac01(BaseModel):
    field_type: str = Field(..., alias='@type')
    id: str
    members: List[str]


class Ac0211(BaseModel):
    field_type: str = Field(..., alias='@type')
    id: str
    members: List[str]


class ValueSets(BaseModel):
    ac0_1: Optional[Ac01] = Field(None, alias='ac0.1')
    ac0_2: Optional[Ac0211] = Field(None, alias='ac0.2')


class Terminology1(BaseModel):
    field_type: str = Field(..., alias='@type')
    conceptCode: str
    termDefinitions: TermDefinitions1
    termBindings: TermBindings
    terminologyExtracts: Dict[str, Any]
    valueSets: ValueSets


class OriginalLanguage(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Language30(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Author(BaseModel):
    name: str
    organisation: Optional[str] = None
    email: Optional[str] = None


class Translation(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language30
    author: Author
    otherDetails: Dict[str, Any]
    accreditation: Optional[str] = None


class TemplateOverlay(BaseModel):
    field_type: str = Field(..., alias='@type')
    uid: str
    description: Description1
    parentArchetypeId: str
    differential: bool
    archetypeId: ArchetypeId
    definition: Definition1
    terminology: Terminology1
    adlVersion: str
    buildUid: str
    rmName: str
    rmRelease: str
    generated: bool
    otherMetaData: Dict[str, Any]
    originalLanguage: OriginalLanguage
    translations: List[Translation]


class OriginalLanguage1(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Language31(BaseModel):
    terminologyId: TerminologyId
    codeString: str


class Translation1(BaseModel):
    field_type: str = Field(..., alias='@type')
    language: Language31
    author: Dict[str, Any]
    otherDetails: Dict[str, Any]


class Model(BaseModel):
    field_type: str = Field(..., alias='@type')
    uid: str
    description: Description
    parentArchetypeId: str
    differential: bool
    archetypeId: ArchetypeId
    definition: Definition
    terminology: Terminology
    adlVersion: str
    buildUid: str
    rmName: str
    rmRelease: str
    generated: bool
    templateId: str
    otherMetaData: Dict[str, Any]
    templateOverlays: List[TemplateOverlay]
    originalLanguage: OriginalLanguage1
    translations: List[Translation1]
