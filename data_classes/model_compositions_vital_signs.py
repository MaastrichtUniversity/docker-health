# generated by datamodel-codegen:
#   filename:  vital_signs_20231025075308_000001_1.json
#   timestamp: 2023-11-30T14:56:49+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class Name(BaseModel):
    field_type: str = Field(..., alias='_type')
    value: str


class ArchetypeId(BaseModel):
    value: str


class TemplateId(BaseModel):
    value: str


class ArchetypeDetails(BaseModel):
    archetype_id: ArchetypeId
    template_id: TemplateId
    rm_version: str


class TerminologyId(BaseModel):
    field_type: str = Field(..., alias='_type')
    value: str


class Language(BaseModel):
    terminology_id: TerminologyId
    code_string: str


class Territory(BaseModel):
    terminology_id: TerminologyId
    code_string: str


class DefiningCode(BaseModel):
    terminology_id: TerminologyId
    code_string: str


class Category(BaseModel):
    value: str
    defining_code: DefiningCode


class Id(BaseModel):
    field_type: str = Field(..., alias='_type')
    value: str


class ExternalRef(BaseModel):
    id: Id
    namespace: str
    type: str


class Composer(BaseModel):
    field_type: str = Field(..., alias='_type')
    external_ref: ExternalRef
    name: str


class StartTime(BaseModel):
    value: str


class DefiningCode1(BaseModel):
    terminology_id: TerminologyId
    code_string: str


class Setting(BaseModel):
    value: str
    defining_code: DefiningCode1


class OtherContext(BaseModel):
    field_type: str = Field(..., alias='_type')
    name: Name
    archetype_node_id: str
    items: List


class Context(BaseModel):
    start_time: StartTime
    setting: Setting
    other_context: OtherContext


class ArchetypeDetails1(BaseModel):
    archetype_id: ArchetypeId
    template_id: TemplateId
    rm_version: str


class Language1(BaseModel):
    terminology_id: TerminologyId
    code_string: str


class Encoding(BaseModel):
    terminology_id: TerminologyId
    code_string: str


class Subject(BaseModel):
    field_type: str = Field(..., alias='_type')


class Protocol(BaseModel):
    field_type: str = Field(..., alias='_type')
    name: Name
    archetype_node_id: str
    items: List


class Origin(BaseModel):
    value: str


class Time(BaseModel):
    value: str


class Value(BaseModel):
    field_type: str = Field(..., alias='_type')
    magnitude: Optional[float] = None
    units: Optional[str] = None
    numerator: Optional[float] = None
    denominator: Optional[float] = None
    type: Optional[int] = None


class Item(BaseModel):
    field_type: str = Field(..., alias='_type')
    name: Name
    archetype_node_id: str
    value: Value


class Data1(BaseModel):
    field_type: str = Field(..., alias='_type')
    name: Name
    archetype_node_id: str
    items: List[Item]


class State(BaseModel):
    field_type: str = Field(..., alias='_type')
    name: Name
    archetype_node_id: str
    items: List


class Event(BaseModel):
    field_type: str = Field(..., alias='_type')
    name: Name
    archetype_node_id: str
    time: Time
    data: Data1
    state: State


class Data(BaseModel):
    field_type: str = Field(..., alias='_type')
    name: Name
    archetype_node_id: str
    origin: Origin
    events: List[Event]


class ContentItem(BaseModel):
    field_type: str = Field(..., alias='_type')
    name: Name
    archetype_details: ArchetypeDetails1
    archetype_node_id: str
    language: Language1
    encoding: Encoding
    subject: Subject
    protocol: Protocol
    data: Data


class Model(BaseModel):
    field_type: str = Field(..., alias='_type')
    name: Name
    archetype_details: ArchetypeDetails
    archetype_node_id: str
    language: Language
    territory: Territory
    category: Category
    composer: Composer
    context: Context
    content: List[ContentItem]
